#!/usr/bin/env node

/**
 * Setup dotenv
 */

require('dotenv').config();

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('chart-the-stock-market:server');
let https = require('https');
let pemCertificateCreator = require("../services/pemCertificateCreator");

pemCertificateCreator.promiseCreate({
    days: 1,
    selfSigned: true
}).then(keys => {

    let port = app.get('port');

    /**
     * Create HTTPS server.
     */
    // let server = https.createServer({key: keys.serviceKey, cert: keys.certificate}, (req, res) =>{
    //     res.end('o hai!')
    // });
    let server = https.createServer({key: keys.serviceKey, cert: keys.certificate}, app);

    // https.createServer({key: keys.serviceKey, cert: keys.certificate}, function (req, res) {
    //     res.end('o hai!')
    // }).listen(port);

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        let bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        let addr = server.address();
        let bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
}).catch((error) => {
    console.error(`Could not create certificate because ${error}`)
});
